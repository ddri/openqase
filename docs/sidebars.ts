import type {SidebarsConfig} from '@docusaurus/plugin-content-docs';

// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  // tutorialSidebar: [{type: 'autogenerated', dirName: '.'}], // Commented out autogenerated sidebar

  // Create a sidebar manually
  docsSidebar: [
    // 1. Overview & Setup
    {
      type: 'category',
      label: 'Getting Started',
      items: [
        'overview', // High-level purpose, goals
        'tech-stack', // List of main technologies
        'installation', // Cloning, installing deps (root + /docs)
        'running-locally', // How to run Next.js app + Docusaurus dev servers
        'supabase-setup', // Setting up local Supabase, environment variables (.env)
      ],
    },
    // Add Roadmap here
    {
      type: 'doc',
      id: 'roadmap',
    },
    // 2. Core Concepts & Architecture
    {
      type: 'category',
      label: 'Architecture',
      items: [
        'app-structure', // Overview of directories (src, app, lib, components, etc.)
        'routing', // Next.js App Router conventions used
        'server-client-components', // How RSC/Client components are used
        'authentication', // Middleware, Supabase Auth, user roles
        'data-fetching', // Patterns (Server Components, Server Actions, Tanstack Query?)
        'styling', // Tailwind CSS, shadcn/ui usage
      ],
    },
    // 3. Backend & Data
    {
      type: 'category',
      label: 'Backend (Supabase)',
      items: [
        'supabase-integration', // Explain src/lib/supabase-* utils, when to use each client
        'schema-overview', // High-level view of tables and relationships
        'migrations', // How database schema changes are managed (Supabase CLI, migrations dir)
        'database-seeding', // Any scripts for seeding data (e.g., setup-admin.ts)
      ],
    },
    // 4. Frontend & UI
    {
      type: 'category',
      label: 'Frontend',
      items: [
        'component-library', // Overview of src/components, common patterns
        'forms-validation', // Handling forms (React Select?), Zod validation (src/lib/validation.ts)
        // Add sections for contexts, hooks if significant
      ],
    },
    // 5. Key Features (Expand as needed)
    {
      type: 'category',
      label: 'Features',
      items: [
        'admin-cms-guide', // Existing guide - maybe rename to 'Admin CMS' later?
        // Add pages for other major features if applicable
        // 'public-blog',
        // 'case-studies-feature',
        // 'learning-paths', // Based on src/app/paths?
      ],
    },
    // 6. Development Workflow
    {
      type: 'category',
      label: 'Development Workflow',
      items: [
        'coding-style', // Linting (ESLint), formatting (Prettier?)
        'testing', // Testing strategy, running tests (if any found)
        'scripts', // Explanation of custom scripts in /scripts
        'contributing', // Contribution guidelines (referencing CONTRIBUTING.md)
        'deployment', // How the app and docs are deployed (Vercel?)
      ],
    },
    // 7. Release Notes (Keep separate or move under Workflow)
    'release-notes',
    // --- Maybe remove example page later ---
    // 'example-page',
  ],
};

export default sidebars;
